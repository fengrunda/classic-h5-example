// 按需添加 命名规范请参考 https://docs.emmet.io/cheat-sheet/

/*---------------------------------------------------布局 start -----------------------------------------------------*/
.pos-r {
  position: relative !important;
}

.pos-a {
  position: absolute !important;
}

.pos-f {
  position: fixed !important;
}

.pos-s {
  position: static !important;
}

.pos-sk {
  position: sticky !important;
}

.pos-us {
  position: unset !important;
}

.zi-10 {
  z-index: 10 !important;
}

.d-n {
  display: none !important;
}

.d-b {
  display: block !important;
}

.d-ib {
  display: inline-block !important;
}

.t-0 {
  top: 0 !important;
}

.r-0 {
  right: 0 !important;
}

.b-0 {
  bottom: 0 !important;
}

.l-0 {
  left: 0 !important;
}

.of-h {
  overflow: hidden !important;
}

.of-a {
  overflow: auto !important;
}

.va-t {
  vertical-align: top !important;
}

.va-b {
  vertical-align: bottom !important;
}

.va-m {
  vertical-align: middle !important;
}

.va-bl {
  vertical-align: baseline !important;
}

.op-0 {
  opacity: 0 !important;
}

.mtLoop(@counter) when (@counter > = 0) {
  .mt-@{counter} {
    margin-top: unit(@counter, px) !important;
  }
  .mtLoop(( @counter - 5));
}
.mtLoop(80);

.mbLoop(@counter) when (@counter > = 0) {
  .mb-@{counter} {
    margin-bottom: unit(@counter, px) !important;
  }
  .mbLoop(( @counter - 5));
}
.mbLoop(80);

.mlLoop(@counter) when (@counter > = 0) {
  .ml-@{counter} {
    margin-left: unit(@counter, px) !important;
  }
  .mlLoop(( @counter - 5));
}
.mlLoop(80);

.mrLoop(@counter) when (@counter > = 0) {
  .mr-@{counter} {
    margin-right: unit(@counter, px) !important;
  }
  .mrLoop(( @counter - 5));
}
.mrLoop(80);

.ml-a {
  margin-left: auto !important;
}

.mr-a {
  margin-right: auto !important;
}

.pbLoop(@counter) when (@counter > = 0) {
  .pb-@{counter} {
    padding-bottom: unit(@counter, px) !important;
  }
  .pbLoop(( @counter - 5));
}
.pbLoop(80);

.ptLoop(@counter) when (@counter > = 0) {
  .pt-@{counter} {
    padding-top: unit(@counter, px) !important;
  }
  .ptLoop(( @counter - 5));
}
.ptLoop(80);

.plLoop(@counter) when (@counter > = 0) {
  .pl-@{counter} {
    padding-left: unit(@counter, px) !important;
  }
  .plLoop(( @counter - 5));
}
.plLoop(80);

.prLoop(@counter) when (@counter > = 0) {
  .pr-@{counter} {
    padding-right: unit(@counter, px) !important;
  }
  .prLoop(( @counter - 5));
}
.prLoop(80);

.bz-bb {
  box-sizing: border-box !important;
}

.bz-cb {
  box-sizing: content-box !important;
}
/*---------------------------------------------------布局 end -----------------------------------------------------*/
/*---------------------------------------------------文本 start -----------------------------------------------------*/
.cwLoop(@counter) when (@counter > = 0) {
  .c-white_@{counter} {
    color: rgba(255, 255, 255,@counter / 100) !important;
  }
  .cwLoop(( @counter - 20));
}
.cwLoop(100);

.cbLoop(@counter) when (@counter > = 0) {
  .c-black_@{counter} {
    color: rgba(0, 0, 0,@counter / 100) !important;
  }
  .cbLoop(( @counter - 20));
}
.cbLoop(100);

.fzLoop(@counter) when (@counter < = 48) {
  .fz-@{counter} {
    font-size: unit(@counter, px) !important;
  }
  .fzLoop(( @counter + 4));
}
.fzLoop(20);

.fw-b {
  font-weight: bold !important;
}

.fw-n {
  font-weight: normal !important;
}

.wob-n {
  word-break: normal !important;
}

.wob-k {
  word-break: keep-all !important;
}

.wob-ba {
  word-break: break-all !important;
}

.wow-b {
  word-wrap: break-word !important;
}

.whs-nw {
  white-space: nowrap !important;
}

.ta-c {
  text-align: center !important;
}

.ta-l {
  text-align: left !important;
}

.ta-r {
  text-align: right !important;
}

.lh-1 {
  line-height: 1 !important;
}
/*---------------------------------------------------文本 end -----------------------------------------------------*/
/*---------------------------------------------------flex 容器 start -----------------------------------------------------*/
.d-if {
  display: inline-flex !important;
}

.d-f {
  display: flex !important;
}

.jc-fs {
  justify-content: flex-start !important;
}

.jc-fe {
  justify-content: flex-end !important;
}

.jc-c {
  justify-content: center !important;
}

.jc-sa {
  justify-content: space-around !important;
}

.jc-sb {
  justify-content: space-between !important;
}

.ai-s {
  align-items: stretch !important;
}

.ai-fs {
  align-items: flex-start !important;
}

.ai-fe {
  align-items: flex-end !important;
}

.ai-c {
  align-items: center !important;
}

.fxw-w {
  flex-wrap: wrap !important;
}

.fxd-c {
  flex-direction: column !important;
}

.fxd-r {
  flex-direction: row !important;
}
/*---------------------------------------------------flex 容器 end -----------------------------------------------------*/
/*---------------------------------------------------flex item start ---------------------------------------------------*/
.fxb-a {
  flex-basis: auto !important;
}

.fxb-100 {
  flex-basis: 100% !important;
}

.fxb-50 {
  flex-basis: 50% !important;
}

.fxb-33 {
  flex-basis: 33% !important;
}

.fxg-0 {
  flex-grow: 0 !important;
}

.fxg-1 {
  flex-grow: 1 !important;
}

.fxsh-0 {
  flex-shrink: 0 !important;
}

.fxsh-1 {
  flex-shrink: 1 !important;
}
/*---------------------------------------------------flex item end ---------------------------------------------------*/
.animdelLoop(@counter) when (@counter < = 5000) {
  .animdel-@{counter} {
    animation-delay: unit(@counter, ms) !important;
  }
  .animdelLoop(( @counter + 100));
}
.animdelLoop(0);

.animdurLoop(@counter) when (@counter < = 5000) {
  .animdur-@{counter} {
    animation-duration: unit(@counter, ms) !important;
  }
  .animdurLoop(( @counter + 100));
}
.animdurLoop(0);

.animic-i {
  animation-iteration-count: infinite !important;
}
